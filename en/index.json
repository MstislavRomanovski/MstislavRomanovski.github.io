[{"authors":null,"categories":null,"content":"Malkov Roman Sergeevich - sudent of RUDN university, started getting education at year 2021.\n  Download my resumé.\n","date":1372636800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1372636800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"Malkov Roman Sergeevich - sudent of RUDN university, started getting education at year 2021.\n  Download my resumé.","tags":null,"title":"Malkov Roman Sergeevich","type":"authors"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways:\n Create slides using Wowchemy’s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further event details, including page elements such as image galleries, can be added to the body of this page.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906549200,"objectID":"a8edef490afe42206247b6ac05657af0","permalink":"https://mstislavromanovski.github.io/en/talk/example-talk/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/en/talk/example-talk/","section":"event","summary":"An example talk using Wowchemy's Markdown slides feature.","tags":[],"title":"Example Talk","type":"event"},{"authors":[],"categories":[],"content":"systemd Systemd is a set of basic building blocks for a Linux system. He provides a system and service manager that runs as PID 1 and starts the rest of the system. Systemd provides: * Aggressive parallelization possibilities\n  Uses socket activation and D-Bus to start services.\n  Offers to start daemons on demand, monitors processes with Linux control groups.\n  Supports snapshots and system state restore\n  Supports mount points and automounts\n  Implements complex service management logic based on transactional dependencies.\n  systemd provides a system of dependencies between various entities called “units” (modules/tasks) that systemd can manage. Modules encapsulate various objects needed for system loading and maintenance. Most units are configured in unit configuration files, syntax and basic set of parameters which are described in systemd.unit(5) , however some are created automatically from other configuration files, dynamically from system state or programmatically at run time. Devices can be “active” (meaning running, connected, connected, …, depending on the type of device, see below) or “inactive” (which means stopped, unlinked, disconnected, …) and also in the process of activation or deactivation, i.e. between two states (these states are called “activation”, “deactivation”). Also available a special “failed” state, which is very similar to “inactive” and is entered when the service somehow failed (the process returned a code exit errors or failed, operation timed out or after too many restarts). ). If this state entered, the reason will be logged for further use. The following types of units are available:\n  service - Service in the system, including start instructions, restart and stop the service.\n  socket - The network socket associated with the service.\n  device - A device specifically managed by systemd.\n  mount - Mount point managed by systemd.\n  automount - The mount point is automatically mounted when loading.\n  swap - Swap in the system.\n  target - Synchronization point for other units. Commonly used to start enabled services on boot.\n  path - Path to activate based on path. For example, you can start services based on the state of a particular path, e.g. whether it exists or not.\n  timer - Timer for scheduling the activation of another device.\n  snapshot - A “snapshot” of the current state of systemd. Usually used to rollback after making temporary changes to systemd\n  slice - Resource limitation via Linux Control Group nodes (cgroups).\n  scope - Information from systemd bus interfaces. Commonly used to manage external system processes.\n  And here is the location of systemd modules files (Screenshot 1)\n     ( Screenshot 1 )\nA little about the structure of Units    ( Screenshot 2 )\nIn screenshot 1, we can observe some structure of the nginx unit file:\n [Unit] — This usually describes the metadata of the service and its interaction with other services.    Description — a brief description of the daemon\n  Documentation — man page, which describes how to work with the service, in In this case, Nginx\n  After — Literally means “After”. The field indicates after which daemons or events, this unit will be started. In our example, the Nginx unit will be started after the network interfaces.\n  [Service] — Describes the configuration. Applies only to service units.  Type — An important parameter. Describes how the daemon will be started. In our version, this is forking, but you may encounter others:\n  forking — after starting, the daemon forks (fork), completing parent process;\n  simple — at startup, the daemon goes into standby mode, in its original form;\n  one-shot — one-time execution. This type is used for scripts that should run and finish after execution.\n  PIDFile — points to the main process that monitors systemd\n  ExecStartPre — main path and arguments to be command started BEFORE starting the main process\n  ExecStart — main path and arguments to be launched with Nginx\n  ExecReload — specifies the command to restart the service\n  ExecStop — command to stop the service\n  TimeoutStopSec — Indicates that the system will wait 5 seconds stopping a service before forcibly stopping it\n  [Install] — describes the behavior of the unit.   WantedBy — describes exactly how the device will be turned on. multi-user.target means that on startup, in a directory /etc/systemd/system directory multi-user.target.wants will be created, in which will create a symbolic link to the service. This is the parameter dependencies with the current block, when you stop the service this link will be deleted.  systemctl You can perform various management tasks to manage services systemd using the systemctl command. Below is a set of examples commands demonstrating how to use systemctl to control systemd services ( Screenshots 3 - 4 ).\n   ( Screenshot 3 )\n   ( Screenshot 4 )\nFor a complete list of options for the systemctl command, see using the man systemctl command.\nOther systemd commands from the system *ctl Along …","date":1654340526,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1654340526,"objectID":"90d4ee34d6347e13183b1b438b958ec4","permalink":"https://mstislavromanovski.github.io/en/post/choosepost/systemd/","publishdate":"2022-06-04T14:02:06+03:00","relpermalink":"/en/post/choosepost/systemd/","section":"post","summary":"systemd Systemd is a set of basic building blocks for a Linux system. He provides a system and service manager that runs as PID 1 and starts the rest of the system.","tags":[],"title":"Systemd","type":"post"},{"authors":[],"categories":[],"content":"In computer programming, a scientific programming language can refer to two degrees of the same concept.\nBroadly speaking, a scientific programming language is a programming language that is widely used in computational science and computational mathematics. In this sense, C/C++ and Python [1] can be considered scientific programming languages.\nIn a stricter sense, a scientific programming language is a language designed and optimized for the use of mathematical formulas and matrices. [2] Such languages ​​are characterized not only by the presence of libraries that perform mathematical or scientific functions, but also by the syntax of the language itself. [3] For example, neither C++ nor Python has built-in matrix types or functions for matrix arithmetic (addition, multiplication, etc.); instead, this functionality is available through the standard libraries. Scientific programming languages ​​in a stricter sense include ALGOL, APL, Fortran, J, Julia, Maple, MATLAB, and R. [4] [5]\nScientific programming languages ​​should not be confused with scientific language in general, which loosely refers to the higher standards of precision, correctness, and brevity expected of practitioners of the scientific method. Link to source: https://en.wikipedia.org/wiki/Scientific_programming_language\n","date":1653735398,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653735398,"objectID":"8a4e8e2a16e6e51c137bfe7afb2e9826","permalink":"https://mstislavromanovski.github.io/en/post/sinceprogramming/sinceprogramming/","publishdate":"2022-05-28T13:56:38+03:00","relpermalink":"/en/post/sinceprogramming/sinceprogramming/","section":"post","summary":"In computer programming, a scientific programming language can refer to two degrees of the same concept.\nBroadly speaking, a scientific programming language is a programming language that is widely used in computational science and computational mathematics.","tags":[],"title":"Scientific Programming Languages","type":"post"},{"authors":["Malkov Roman Sergeevich"],"categories":[],"content":"What was done?\n Operating systems: completed labs 9 and 10, as well as the fourth part of the project to create a site based on hugo. Programming technology: see the light at the end of the tunnel. Modeling: Completed 3rd laboratory work. Nothing bigger happened…  ","date":1653735242,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653735242,"objectID":"df7a137039edffc29191e1f9060ee57c","permalink":"https://mstislavromanovski.github.io/en/post/prevweek4/","publishdate":"2022-05-28T13:54:02+03:00","relpermalink":"/en/post/prevweek4/","section":"post","summary":"What was done?\n Operating systems: completed labs 9 and 10, as well as the fourth part of the project to create a site based on hugo. Programming technology: see the light at the end of the tunnel.","tags":[],"title":"Previous Week 4","type":"post"},{"authors":["Malkov Roman Sergeevich"],"categories":[],"content":"What was done?\n Operating systems: completed labs 11 and 12, as well as the fifth part of the project to create a site based on hugo. Programming technology: Something went wrong, but it seems ok. Modeling: Completed 4th laboratory work. Nothing bigger happened…  ","date":1653735242,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653735242,"objectID":"ac483d1c0f77fa9364e2dd5f929548ab","permalink":"https://mstislavromanovski.github.io/en/post/prevweek5/","publishdate":"2022-05-28T13:54:02+03:00","relpermalink":"/en/post/prevweek5/","section":"post","summary":"What was done?\n Operating systems: completed labs 11 and 12, as well as the fifth part of the project to create a site based on hugo. Programming technology: Something went wrong, but it seems ok.","tags":[],"title":"Previous Week 5","type":"post"},{"authors":null,"categories":null,"content":"Stages of project implementation  Placement on Github pages of a blank for a personal site.   Install the necessary software. Download website theme template. Host it on git hosting. Set parameter for site URLs. Place the site blank on Github pages.  Add information about yourself to the site.   List of added data. Post a photo of the owner of the site. Place a short description of the owner of the site (Biography). Add information about interests (Interests). Add information from education (Education). Make a post for the past week. Add a post on a topic of your choice: Version management. Git. Continuous Integration and Continuous Deployment (CI/CD).  Add achievements to the site. List of achievements.   Add information about skills (Skills). Add information about the experience (Experience). Add information about achievements (Accomplishments). Make a post for the past week. Add a post on a topic of your choice: Lightweight markup languages. Markup languages. LaTeX. Markdown language. Add links to scientific and bibliometric resources to the site.  Register on the relevant resources and place links to them on the site:   eLibrary: https://elibrary.ru/; Google Scholar: https://scholar.google.com/; ORCID : https://orcid.org/; Mendeley : https://www.mendeley.com/; ResearchGate : https://www.researchgate.net/; Academia.edu : https://www.academia.edu/; arXiv : https://arxiv.org/; github : https://github.com/. Make a post last week. Add a post on a topic of your choice: Making a report. Creation of presentations. Working with bibliography.  Add all other elements to the site.   Make notes for personal projects. Make a post for the past week. Add a post on a topic of your choice. Scientific programming languages. Hosting a bilingual site on Github.  Make support for English and Russian languages.   Place site elements in both languages. Post content in both languages. Make a post for the past week. Add a post on a topic of your choice (bilingual).  ","date":1653696000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653696000,"objectID":"9e7f968761b0b6c71bf7054035966644","permalink":"https://mstislavromanovski.github.io/en/project/academcite/academcite/","publishdate":"2022-05-28T00:00:00Z","relpermalink":"/en/project/academcite/academcite/","section":"project","summary":"An example of using the in-built project page.","tags":["Other"],"title":"Project: site of academic worker","type":"project"},{"authors":[],"categories":[],"content":"Making a report on laboratory work Laboratory work is a small research work that and should be completed in accordance with all approved requirements. When preparing a lab report, you will learn a number of important elements that will come in handy later. you when writing term papers and dissertations.\nReport structure According to GOST 7.32-2001, any research work must be contain the following elements:\n title page; essay; – introduction; the main part; conclusion. GOST also recommends that the following elements be included in the work: list of performers; content; Normative references; – definitions; – designations and abbreviations; – list of sources used; – applications. If you are carrying out complex work that is carried out in several stages, then you may you need to include part or all of the elements of the second list.  The content of the main elements of the report  Title page. The first sheet of work is drawn up strictly according to the model, which is usually provided in the teaching aids for your subject. It not only requires specify elements such as the name of the educational institution, type of work and information about the performer, but also arrange them in strict accordance with the standards. Abstract. The abstract is actually a summary of your entire report. and contains some statistical information. It must specify the number of parts, pages of the work, illustrations, applications, tables, used literary sources and applications. Here is a list of key words and the actual text of the abstract. The latter includes the main elements of work from the set goals to the results and recommendations for their implementation. In practice institutions of higher education do not usually include abstracts in reports on laboratory work. – Introduction. In the introduction of a typical laboratory work, goals are usually prescribed ongoing research and tasks, the implementation of which will help achieve the goals. At the same time, there are works in which students become real pioneers. Have you ever experienced at least once feelings of extreme curiosity and impatience while doing lab work? Feel that in just a couple of minutes you will find the answer to the question to which no one has ever found an answer yet? It is for such studies that a detailed introduction is written with proof of the relevance and novelty of the topic under study. To really conduct research in an area in which, as they say, not yet the foot of a man has stepped, in the introduction you will need to give an assessment of the modern state of the problem under consideration and justify the need for its solution. Main part. Since different universities and disciplines have their own subtleties of laboratory work, the content of the main part in detail described in the relevant manuals. It is important that in this section of the work its essence is reflected, the methodology and results of the work done are described. The main part contains the following elements: the purpose of the study; – tasks, the implementation of which will help achieve the goals; a workflow that describes the actions performed; other sections provided for by the methodological materials on the studied discipline. Conclusion. In this part of the work, you will need to draw conclusions based on the results obtained during the laboratory work. To do this, evaluate how fully implemented assigned tasks. In complex works, other elements may be present, for example, recommendations for further application of the results of the work.  ","date":1653133890,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653133890,"objectID":"8e5c3b42450e5381eacae5d9f8ed581b","permalink":"https://mstislavromanovski.github.io/en/post/postform/","publishdate":"2022-05-21T14:51:30+03:00","relpermalink":"/en/post/postform/","section":"post","summary":"Making a report on laboratory work Laboratory work is a small research work that and should be completed in accordance with all approved requirements. When preparing a lab report, you will learn a number of important elements that will come in handy later.","tags":[],"title":"Postform","type":"post"},{"authors":["Malkov Roman Sergeevich"],"categories":[],"content":"What was done?\n Operating systems: completed laboratory work number 7 and 8, as well as the third part of the project to create a site based on hugo. Programming technology: still desperate. Modeling: 1 lab submitted, 2nd completed, 3rd in progress. Music: I did not invent anything - for mediocrity. 3d modeling: … . Nothing bigger happened…  ","date":1653132870,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653132870,"objectID":"a04b7cdd4564048772be70c9c712a1af","permalink":"https://mstislavromanovski.github.io/en/post/prevweek3/","publishdate":"2022-05-21T14:34:30+03:00","relpermalink":"/en/post/prevweek3/","section":"post","summary":"What was done?\n Operating systems: completed laboratory work number 7 and 8, as well as the third part of the project to create a site based on hugo. Programming technology: still desperate.","tags":[],"title":"Previous Week 3","type":"post"},{"authors":["Malkov Roman Sergeevich"],"categories":[],"content":"Co to jest? Markdown (pronounced markdown) is a lightweight markup language designed to indicate formatting in plain text while maintaining human readability as much as possible, and suitable for machine conversion into advanced publishing languages ​​(HTML, Rich Text, and others). To create a title, use the sign ( # ), for example: 1 # This is heading 1 2 ## This is heading 2 3 ### This is heading 3 4 #### This is heading 4 To make text bold, enclose it in double asterisks: 1 This text is bold. To make text italic, enclose it in single asterisks: 1 This text is italic. To make text bold and italic, enclose it in triple asterisks: 1 This is text is both bold and italic. Quote blocks are created using the \u0026gt; symbol: 1 \u0026gt; The drought had lasted now for ten million years, and the reign of the terrible lizards had long since ended. Here on the Equator, in the continent which would one day be known as Africa, the battle for existence had reached a new climax of ferocity, and the victor was not yet in sight. In this barren and desiccated land, only the small or the swift or the fierce could flourish, or even hope to survive. ↪ ↪ ↪ ↪ ↪ ↪ An unordered (bulleted) list can be formatted with asterisks or dashes: 1 - List item 1 2 - List item 2 3 - List item 3 To nest one list within another, indent the elements of the child list: 34 Lab 3. Markdown 1 - List item 1 2 - List item A 3 - List item B 4 - List item 2 An ordered list can be formatted with the appropriate numbers: 1 1. First instruction 2 1. Second instruction 3 1. Third instruction To nest one list within another, indent the elements of the child list: 1 1. First instruction 2 1. Sub instruction 3 1. Sub-instruction 4 1.Second instruction The Markdown syntax for an embedded link consists of a [link text] part representing the text of the hyperlink and a (file-name.md) part representing the URL or file name which is referenced: 1 link text Markdown supports both embedding code snippets in a sentence and placement between offers in the form of separate fenced blocks. Fenced code blocks are an easy way to highlight syntax for code snippets. General format of fenced code blocks: 1 languages 2 your code goes in here 3 Superscripts and subscripts: 𝐻2 written as 1H~2~O 2 ten written as 1 2^10^ Intratext formulas are made similar to LaTeX formulas. For example, the formula sin2 (𝑥) + cos2 (𝑥) = 1 will be written as 1 $\\sin^2 (x) + \\cos^2 (x) = 1$ Off formulas: sin2 (𝑥) + cos2 (𝑥) = 1 {#eq:eq:sin2+cos2} with reference in text “See formula ([-@eq:eq:sin2+cos2]).” written as 1 $$ 2 \\sin^2 (x) + \\cos^2 (x) = 1 3 $$ {#eq:eq:sin2+cos2} four 5 See formula ([-@eq:eq:sin2+cos2]).\n","date":1652522223,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1652522223,"objectID":"ddab860e8b678056867ffa34ce91c483","permalink":"https://mstislavromanovski.github.io/en/post/markdown/markdown/","publishdate":"2022-05-14T12:57:03+03:00","relpermalink":"/en/post/markdown/markdown/","section":"post","summary":"Co to jest? Markdown (pronounced markdown) is a lightweight markup language designed to indicate formatting in plain text while maintaining human readability as much as possible, and suitable for machine conversion into advanced publishing languages ​​(HTML, Rich Text, and others).","tags":[],"title":"Markdown how not to become crazy","type":"post"},{"authors":["Malkov Roman Sergeevich"],"categories":[],"content":"Stages of work  Create a basic configuration for working with git. Create an SSH key. Create a PGP key. Set up git signatures. Sign up on Github. Create a local directory for completing assignments on the subject.  Performance Create an account on https://github.com and fill in the required data (Screenshot 1).   ( Screenshot 1 )\nInstall git-flow and gh on Fedora Linux (Screenshot 2-3) using the following commands.\ncd /tmp\r2 wget --no-check-certificate -q https://raw.github.com/petervanderdoes ⌋\r↪ /gitflow/develop/contrib/gitflow-installer.sh\r3 chmod +x gitflow-installer.sh\r4 sudo ./gitflow-installer.sh install stable\rsudo dnf install gh    (Screenshot 2)\n   (Screenshot 3)\nWe make a basic git setup, set the name and email of the owner of the repository (Screenshot 4):\ngit config --global user.name \u0026#34;Name Surname\u0026#34;\r2 git config --global user.email \u0026#34;work@mail\u0026#34; Set up utf-8 in git output (Screenshot 4):\ngit config --global core.quotepath false    (Screenshot 4) Set up git verification and signing, set the name of the initial branch, set the autocrlf and safecrlf parameters (Screenshot 5):\ngit config --global init.defaultBranch master\rgit config --global core.autocrlf input\rgit config --global core.safecrlf warn    (Screenshot 5)\nWe create ssh keys using the rsa algorithm with a size of 4096, and using the ed25519 algorithm (Screenshot 6-7):\nssh-keygen -t rsa -b 4096\rssh-keygen -t ed25519    (Screenshot 6)   (Screenshot 7)\nCreate a pgp key (Screenshot 8):\ngpg --full-generate-key  From the proposed options, choose: type RSA and RSA; size 4096; select the expiration date; default value is 0 (does not expire never). GPG will ask for personal information, which will be stored in the key: Name (at least 5 characters). E-mail address. When entering an email, make sure it matches the address used on GitHub. Comment. You can type anything or press the enter key to leave this field blank.     (Screenshot 8)\nNext, we copy the fingerprint of the private key, it was displayed on the console screen during generation (Screenshot 9).   (Screenshot 9)\nAfter that, use the command below to get the key and enter it on https://github.com/settings/keys (Screenshot 10):\n   (Screenshot 10)\ngpg --armor --export \u0026lt;your private key fingerprint\u0026gt; Set up automatic git signatures (Screenshot 11):\ngit config --global user.signingkey \u0026lt;PGP Fingerprint\u0026gt;\r2 git config --global commit.gpgsign true\r3 git config --global gpg.program $(which gpg2)    (Screenshot 11)\nSetting gh (Screenshot 12):\ngh auth login    (Screenshot 12)\nCreate a course repository based on the template (Screenshot 13-15):\nmkdir -p ~/work/study/2021-2022/\u0026#34;Operating Systems\u0026#34;\r2 cd ~/work/study/2021-2022/\u0026#34;Operating systems\u0026#34;\r3 gh repo create study_2021-2022_os-intro\r↪ --template=yamadharma/course-directory-student-template --public\r4 git clone --recursive\r↪ https://github.com/MstislavRomanovski/study_2021-2022_os-intro.git    (Screenshot 13)   (Screenshot 14)   (Screenshot 15)\nWe set up the course directory, and yes, go to the course directory, delete unnecessary files (I didn’t delete them), create the necessary directories (I had to get root rights for this), and send the files to the server (Screenshots 16-20):\ncd ~/work/study/2021-2022/\u0026#34;Operating Systems\u0026#34;/study_2021-2022_os-intro\rrm package.json\rmake COURSE=os-intro\rgit add .\rgit commit -am \u0026#39;feat(main): make course structure\u0026#39;\rgit push            (Screenshots 16 - 20)\n","date":1651920378,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1651920378,"objectID":"c6e2673241fd32f3db68aaae25fc4f2b","permalink":"https://mstislavromanovski.github.io/en/post/gitvc/gitversionscontrol/","publishdate":"2022-05-07T13:46:18+03:00","relpermalink":"/en/post/gitvc/gitversionscontrol/","section":"post","summary":"Stages of work  Create a basic configuration for working with git. Create an SSH key. Create a PGP key. Set up git signatures. Sign up on Github. Create a local directory for completing assignments on the subject.","tags":[],"title":"Git version control","type":"post"},{"authors":["Malkov Roman Sergeevich"],"categories":[],"content":"What was done?  Operating systems: completed labs 3 and 4, as well as the first part of the project to create a site based on hugo. Programming technology: the first 2 laboratory works have been completed. *Nothing bigger happened…  ","date":1651918948,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1651918948,"objectID":"187920d36af19144b3c05959a3e85652","permalink":"https://mstislavromanovski.github.io/en/post/prevweek/prevweek/","publishdate":"2022-05-07T13:22:28+03:00","relpermalink":"/en/post/prevweek/prevweek/","section":"post","summary":"What was done?  Operating systems: completed labs 3 and 4, as well as the first part of the project to create a site based on hugo. Programming technology: the first 2 laboratory works have been completed.","tags":[],"title":"Previous Week","type":"post"},{"authors":["Мальков Роман Сергеевич"],"categories":[],"content":"Что было сделано?\n Операционные системы: выполнены лабораторные работы номер 5 и 6, а также вторая часть проекта по созданию сайта на базе hugo. Технология программирования: в отчаянии. Моделирование: 1 лабораторная работа готова. Музыка: Придумал крутую мрачную последовательность пауэр аккордов. 3д моделирование: 3д модель так и не портирована на Source. Более ничего масштабного не произошло…*  ","date":1651918948,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1651918948,"objectID":"4bd5776606410f2b4a5a91a46f9f18d4","permalink":"https://mstislavromanovski.github.io/en/post/prevweek2/prevweek2/","publishdate":"2022-05-07T13:22:28+03:00","relpermalink":"/en/post/prevweek2/prevweek2/","section":"post","summary":"Что было сделано?\n Операционные системы: выполнены лабораторные работы номер 5 и 6, а также вторая часть проекта по созданию сайта на базе hugo. Технология программирования: в отчаянии. Моделирование: 1 лабораторная работа готова.","tags":[],"title":"Предыдущая неделя 2","type":"post"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Wowchemy Wowchemy | Documentation\n Features  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides   Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E   Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026#34;blueberry\u0026#34; if porridge == \u0026#34;blueberry\u0026#34;: print(\u0026#34;Eating...\u0026#34;)  Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\n Fragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}}\r{{% fragment %}} **Two** {{% /fragment %}}\r{{% fragment %}} Three {{% /fragment %}} Press Space to play!\nOne \rTwo \rThree \r A fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears   Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}} Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view    Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links    night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links   Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026#34;/media/boards.jpg\u0026#34; \u0026gt;}} {{\u0026lt; slide background-color=\u0026#34;#0000FF\u0026#34; \u0026gt;}} {{\u0026lt; slide class=\u0026#34;my-style\u0026#34; \u0026gt;}}  Custom CSS Example Let’s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }  Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://mstislavromanovski.github.io/en/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/en/slides/example/","section":"slides","summary":"An introduction to using Wowchemy's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":["Malkov Roman Sergeevich","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Create your slides in Markdown - click the Slides button to check out the example.   Supplementary notes can be added here, including code, math, and images.\n","date":1372636800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1372636800,"objectID":"ff6a19061a984819d30c916886db56ef","permalink":"https://mstislavromanovski.github.io/en/publication/example/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/en/publication/example/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":[],"title":"An example conference paper","type":"publication"}]